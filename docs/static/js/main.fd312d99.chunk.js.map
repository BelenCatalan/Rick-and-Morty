{"version":3,"sources":["images/Rick_and_Morty.png","images/nave.png","components/CharacterCard.js","components/CharacterList.js","components/Filters.js","components/CharacterDetail.js","services/getDataApi.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","CharacterCard","props","className","to","character","id","src","image","alt","name","species","CharacterList","characters","length","charactersFilter","map","key","Filters","onSubmit","e","preventDefault","htmlFor","type","placeholder","onChange","ev","console","log","target","value","handleFilterText","CharacterDetail","nave","status","origin","episodes","getDataApi","fetch","then","response","json","data","results","episode","App","useState","setCharacters","setCharactersFilter","useEffect","sort","a","b","filteredCharacters","filter","toLowerCase","includes","logo","exact","path","render","match","params","characterId","parseInt","foundCharacter","find","undefined","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fd312d99.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Rick_and_Morty.75509f2e.png\";","module.exports = __webpack_public_path__ + \"static/media/nave.624910a2.png\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst CharacterCard = (props) => {\n  return (\n    <li className=\"card__container\">\n      <Link className=\"link__decoration\" to={`/character/${props.character.id}`}>\n        <img className=\"card__image\" src={props.character.image} alt=\"character_name\" />\n        <h4 className=\"card__text--color card__h4\">{props.character.name}</h4>\n        <p className=\"card__text--color card__p\">{props.character.species}</p>\n      </Link>\n    </li>\n  );\n};\n\nCharacterCard.propTypes = {\n  character: PropTypes.shape({\n    id: PropTypes.number,\n    name: PropTypes.string,\n    status: PropTypes.string,\n    species: PropTypes.string,\n    origin: PropTypes.string,\n    image: PropTypes.string,\n    episodes: PropTypes.number,\n  }),\n};\n\nexport default CharacterCard;\n","import React from 'react';\nimport CharacterCard from './CharacterCard';\nimport PropTypes from 'prop-types';\n\nfunction CharacterList(props) {\n  if (props.characters.length === 0) {\n    return (\n      <div>\n        <p className=\"text__advise\">No hay ning√∫n personaje que coincida con: {props.charactersFilter}</p>\n      </div>\n    );\n  } else {\n    return (\n      <section className=\"section__grid\">\n        <ul className=\"wrapper card__ul\">\n          {props.characters.map((character) => {\n            return <CharacterCard key={character.id} /*name={character.name} id={character.id}*/ character={character} /*image={character.image} specie={character.species}*/ />;\n          })}\n        </ul>\n      </section>\n    );\n  }\n}\nCharacterList.propTypes = {\n  characters: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default CharacterList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Filters(props) {\n  const handleInputCharacter = (ev) => {\n    ev.preventDefault();\n    console.log(ev.target.value);\n    props.handleFilterText({\n      value: ev.target.value,\n      name: ev.target.name,\n    });\n  };\n  const handlerSubmit = (e) => {\n    e.preventDefault();\n  };\n  return (\n    <section className=\"input__style\">\n      <form onSubmit={handlerSubmit} className=\"input__style\">\n        <label className=\"input__style\" htmlFor=\"name\"></label>\n        <input className=\"input__label\" type=\"text\" name=\"character\" id=\"name\" placeholder=\"Character name\" onChange={handleInputCharacter} value={props.charactersFilter} />\n      </form>\n    </section>\n  );\n}\n\nFilters.propTypes = {\n  charactersFilter: PropTypes.string.isRequired,\n  handleFilterText: PropTypes.func.isRequired,\n};\n\nexport default Filters;\n","import React from 'react';\nimport nave from '../images/nave.png';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nfunction CharacterDetail(props) {\n  return (\n    <div className=\"card__content\">\n      <div>\n        <span className=\"card__text\"> </span>\n        <Link to=\"/\">\n          <img className=\"ship__link\" src={nave} alt=\"nave Rick and Morty\" />\n        </Link>\n        <div className=\"content card__div\">\n          <header>\n            <img className=\"detail__image\" src={props.character.image} alt={props.character.name} />\n          </header>\n          <section>\n            <ul className=\"detail__ul card__text\">\n              <li className=\"card__title\">{props.character.name}</li>\n              <li className=\"card__text\">Status: {props.character.status}</li>\n              <li>Species:{props.character.species}</li>\n              <li>Origin: {props.character.origin}</li>\n              <li>Episodes:{props.character.episodes}</li>\n            </ul>\n          </section>\n        </div>\n      </div>\n    </div>\n  );\n}\nCharacterDetail.propTypes = {\n  character: PropTypes.object.isRequired,\n};\n\nexport default CharacterDetail;\n","const getDataApi = () => {\n  return fetch('https://rickandmortyapi.com/api/character/')\n    .then((response) => response.json())\n    .then((data) => {\n      return data.results.map((character) => {\n        return {\n          id: character.id,\n          name: character.name,\n          status: character.status,\n          species: character.species,\n          origin: character.origin.name,\n          image: character.image,\n          episodes: character.episode.length,\n        };\n      });\n    });\n};\nexport default getDataApi;\n","import React, { useEffect, useState } from 'react';\nimport '../stylesheets/App.css';\nimport logo from '../images/Rick_and_Morty.png';\nimport CharacterList from './CharacterList';\nimport Filters from './Filters';\nimport CharacterDetails from './CharacterDetail';\nimport getDataApi from '../services/getDataApi';\nimport { Route, Switch } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nfunction App() {\n  const [characters, setCharacters] = useState([]);\n  const [charactersFilter, setCharactersFilter] = useState('');\n\n  useEffect(() => {\n    getDataApi().then((data) => {\n      setCharacters(data);\n    });\n  }, []);\n\n  const handleFilterText = (data) => {\n    setCharactersFilter(data.value);\n  };\n\n  characters.sort(function (a, b) {\n    if (a.name < b.name) return -1;\n    if (a.name > b.name) return 1;\n    return 0;\n  });\n\n  const filteredCharacters = characters.filter((character) => {\n    console.log(character.name);\n    return character.name.toLowerCase().includes(charactersFilter.toLowerCase());\n  });\n\n  // const renderFilterCharacters = () => {\n  //   const filteredCharacters = characters.filter((character) => {\n  //     if (character.name.toLowerCase().includes(charactersFilter.toLowerCase())) {\n  //       return <CharacterList characters={filteredCharacters} />;\n  //     } else {\n  //       return <p>No se encuentra</p>;\n  //     }\n  //   });\n  // };\n\n  // console.log(filteredCharacters);\n  const renderCharacterDetails = (props) => {\n    console.log(props);\n    console.log(props.match.params.characterId);\n    const characterId = parseInt(props.match.params.characterId);\n    console.log(characterId);\n    const foundCharacter = characters.find((character) => {\n      return character.id === characterId;\n    });\n    console.log(foundCharacter);\n    if (foundCharacter !== undefined) {\n      return <CharacterDetails character={foundCharacter} /*name={foundCharacter.id}*/ />;\n    } else {\n      return <p className=\"text__advise\">El personaje que buscas no existe</p>;\n    }\n  };\n\n  return (\n    <div>\n      <header>\n        <img className=\"header__name\" src={logo} alt=\"Rick and Morty\" />\n      </header>\n\n      <Switch>\n        {/* <Route path=\"/\" render={() => <Filters handleFilterText={handleFilterText} charactersFilter={charactersFilter} />} /> */}\n        <Route exact path=\"/\">\n          <Filters handleFilterText={handleFilterText} charactersFilter={charactersFilter} />\n          <CharacterList characters={filteredCharacters} charactersFilter={charactersFilter} />\n        </Route>\n        <Route path=\"/character/:characterId\" render={renderCharacterDetails} />\n        {/* <CharacterDetails /> */}\n      </Switch>\n    </div>\n  );\n}\n\nApp.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      characterId: PropTypes.string.isRequired,\n    }),\n  }),\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}